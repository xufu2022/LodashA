import * as _ from "lodash";
const log=(fun:any): void=>console.log(fun);
const header=(title: string): void=>log(`************************* ${title} ************************`)
//forEach/each
const object3=[
    {year:2016,month:3},
    {year:2017,month:4},
    {year:2018,month:2},
    {year:2015,month:3},
    {year:2014,month:3},
    {year:2013,month:3},
    {year:2012,month:3},
    {year:2011,month:3},
];

let users=[
    {user: 'barney', age:36, active: true},
    {user: 'fred', age:40, active: false},
    {user: 'pebble', age:41, active: false},
]
let totalSales=[
    {year: 2013, total:100},
    {year: 2014, total:120},
    {year: 2015, total:180},
    {year: 2016, total:200},
]
let sum=0

header('each foreach')
console.log(_.each(users,i=>i.user))
_.forEach(totalSales,function(i){sum+=i.total})
console.log(sum)

header('eachright foreachright')
log(_.eachRight(users, i=>console.log(i.user)))
log(_.eachRight(totalSales, i=>console.log(i.total)))

// filter
console.log(_.filter(totalSales,i=>i.total>100))
console.log(_.filter(totalSales,i=>i.total>150))
console.log(_.filter(users,i=>i.active))

// map
console.log(_.map(totalSales,i=>i.total * i.total))

//reject similar to filter, but return not truthy value
console.log(_.reject(users,i=>i.active))

// find return first value from collection
console.log(_.find([1,2,3,4],i=>i % 2 ===0))
console.log(_.findIndex([1,2,3,4],i=>i % 2 ===0))
console.log(_.findLast([1,2,3,4],i=>i % 2 ===0))
console.log(_.findLast(object3,i=>i.month <6))

// includes
console.log(_.includes([1,2,3,4,5,6],10))
console.log(_.includes([1,2,3,4,5,6],5))
console.log(_.includes([1,2,3,4,5,6],5,5))
console.log(_.includes([1,2,3,4,5,6],5,2))

// order by default ascending
console.log(_.orderBy(object3,x=>x.year))
console.log(_.orderBy(object3,x=>x.year,'desc'))
console.log(_.orderBy(object3,['year','month'],'desc'))
console.log(_.orderBy(object3,['year','month'],['asc','desc']))
console.log(_.orderBy(object3,[x=>x.year,x=>x.month],['asc','desc']))

// sort do not have direction control
console.log(_.sortBy(object3,x=>x.year))
console.log(_.sortBy(object3,'year'))
console.log(_.sortBy(object3,['year','month']))

// groupby
console.log(_.groupBy(object3,x=>x.year))
console.log(_.groupBy(object3,x=>x.month))

//size
console.log(_.size(object3))
console.log(_.size('hello world'))

// invert crate new object inverted from given object
var object={a:1,b:2,c:3}
console.log(_.invert(object));
var object2={a:1,b:2,c:2} // same value override the item before
console.log(_.invert(object2));

header('sample size')
var numbers=[1,2,3,4,5,6,7,8,9]
log(_.sample(numbers))
log(_.sample(numbers))
log(_.sampleSize(numbers,9))
log(_.sampleSize(numbers,9))

header('CountBy')
// property occurance
log(_.countBy(numbers))
numbers=[1,2,3,3,2,2]
log(_.countBy(numbers)) //{ '1': 1, '2': 3, '3': 2 }
log(_.countBy(object3,(x)=>x.month)) //{ '2': 1, '3': 6, '4': 1 }
log(_.countBy(object3,"month")) //{ '2': 1, '3': 6, '4': 1 }

header('Map')
//return array of objects
log(_.map(totalSales,(i)=>i.total * i.total));

header('Partition')
//first group return truthy value, second group return falthy value
log(_.partition(totalSales,i=>i.total>150))
log(_.partition(totalSales,i=>i.total>180))
log(_.partition(users,i=>i.active))

header('Sample')
var numbers=[1,2,3,4,5,6,7,8,9]
log(_.sample(numbers))

header("Shuffle")
// return the collection in random order
log(_.shuffle(numbers))
log(_.sampleSize(numbers,9))
// shuffle use fisher yates shuffle
// samlesize just random 

header('Some and Every')
//any return false, then the iteration stop
log(_.every(object3,i=>i.year>2016))
log(_.every(users,"active"))
log(_.every(users,["active",false]))

log(_.some(object3,i=>i.year>2016))
log(_.some(users,"active"))
log(_.some(users,["active",false]))
log(_.some(users,{'user':'barney','active':false}))

header('FlatMap, FlatMapDeep and FlatMapDepth')
log(_.flatMap([1,2,3,4],i=>i*i))
log(_.flatMap([1,2,3,4],i=>[i,i]))
log(_.flatMap([1,2,3,4],(v,i)=>`${i}:${v}`))
log(_.flatMap([1,[[2,3,4],5]])) 
log(_.flatMapDeep([1,[[2,3,4],5]])) 
log(_.flatMapDepth([1,[[2,3,4],5,6,[7,8,9]]],i=>i,4))

header('InvokeMap')
//execute the function for each element in collection
log(_.invokeMap([[5,2,9],[2,4,1]],'sort'))
log(_.invokeMap([[5,2,9],[2,4,1]],String.prototype.split, '')) //[ [ '5', ',', '2', ',', '9' ], [ '2', ',', '4', ',', '1' ] ]

header('KeyBy')
//returns an object with the keys that have been generated by a running each element of the collection
log(_.keyBy(totalSales, i=>i.year))
log(_.keyBy(totalSales, 'year'))
// {
//     '2013': { year: 2013, total: 100 },
//     '2014': { year: 2014, total: 120 },
//     '2015': { year: 2015, total: 180 },
//     '2016': { year: 2016, total: 200 }
//   }

header('Reduce and ReduceRight')
//running each elements in the collecton through the given iterative function supplied
log(_.reduce([1,2,3,4], (sum,m)=>sum+m*2,0))
log(_.reduce([1,2,3,4], (sum,m)=>sum+m*2,10))
log(_.reduce([1,2,3,4], (sum,m)=>sum+m*2))  //sum will be the first value and iterative start from the second elements

var array=[[0,1],[2,3],[4,5]]
log(_.reduce(array,(a,b)=>a.concat(b))) //[ 0, 1, 2, 3, 4, 5 ]
log(_.reduceRight(array,(a,b)=>a.concat(b))) //[ 0, 1, 2, 3, 4, 5 ]